# Ejemplo 3.12.2. Codificador decimal: dispone de 10 entradas, E9 a E0, y de cuatro salidas que contienen el valor en binario puro de la entrada activada. Opción 2
# TESTED

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
--use IEEE.STD_LOGIC_SIGNED.ALL;
use IEEE.numeric_std.all;

entity base is
	Port (
		G_CLOCK_50 : in std_logic;
		V_SW : in std_logic_vector (9 downto 0);
		V_BT:  in std_logic_vector (3 downto 0);
		G_LED : out std_logic_vector (9 downto 0);
		G_HEX0 : out std_logic_vector (0 to 6);
		G_HEX1 : out std_logic_vector (0 to 6);
		G_HEX2 : out std_logic_vector (0 to 6);
		G_HEX3 : out std_logic_vector (0 to 6);
		G_HEX4 : out std_logic_vector (0 to 6);
		G_HEX5 : out std_logic_vector (0 to 6)
		);
end base;

architecture behavioral of base is
--aqui comienzan las signals
signal entrada: std_logic_vector (9 downto 0);
signal salida: std_logic_vector (3 downto 0);
--aqui acaban

begin
--asignación de signals, entradas y salidas
entrada<=v_sw(9 downto 0);
g_led(3 downto 0)<=salida;
--fin de asignación de signals, entradas y salidas

process(entrada)
begin
salida(3)<=entrada(9) or entrada(8);
salida(2)<=entrada(7) or entrada(6) or entrada(5) or entrada(4);
salida(1)<=entrada(7) or entrada(6) or entrada(3) or entrada(2);
salida(0)<=entrada(9) or entrada(7) or entrada(5) or entrada(3) or entrada(1);
end process;
end Behavioral;
