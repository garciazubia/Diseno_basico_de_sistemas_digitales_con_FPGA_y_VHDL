# Ejercicio 5.3. Volvamos al limpiaparabrisas pero con un solo pulsador P. El pulsador P invierte el estado del motor. 
# P es activo por pulso: para dar la orden ha de ser apretado y soltado, 0-1-0 en al menos dos flancos diferentes. 

# TESTED

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
--use IEEE.STD_LOGIC_SIGNED.ALL;
use IEEE.numeric_std.all;

entity base is
	Port (
		G_CLOCK_50 : in std_logic;
		V_SW : in std_logic_vector (9 downto 0);
		V_BT:  in std_logic_vector (3 downto 0);
		G_LED : out std_logic_vector (9 downto 0);
		G_HEX0 : out std_logic_vector (6 downto 0);
		G_HEX1 : out std_logic_vector (6 downto 0);
		G_HEX2 : out std_logic_vector (6 downto 0);
		G_HEX3 : out std_logic_vector (6 downto 0);
		G_HEX4 : out std_logic_vector (6 downto 0);
		G_HEX5 : out std_logic_vector (6 downto 0)
		);
end base;

architecture behavioral of base is

--aqui comienzan las signals
signal clk: std_logic;
signal inicio: std_logic;
signal P: std_logic;
signal M: std_logic;
type nombre_estado is (OFF, ONN, T1, T2);
signal estado: nombre_estado  := OFF;

begin
-- asignación de signals, entradas y salidas
clk<=G_CLOCK_50;
inicio<=not(v_bt(0));
P<=not(v_bt(3));
g_led(0)<=M;
--fin de asignación de signals, entradas y salidas

process(clk, inicio)
begin
if inicio='1' then
	estado<=OFF;
elsif rising_edge(clk) then
case estado is
			when OFF =>
			    if P='1' then
			        estado<=T1;
			    else   
			        estado<=OFF;
			    end if;   
			when T1 => 
			    if P='1' then
			        estado<=T1;
			    else   
			        estado<=ONN;
			    end if;   
			when ONN =>
			    if P='1' then
			        estado<=T2;
			    else   
			        estado<=ONN;
			    end if;   
			when T2 =>
    		    if P='1' then
			        estado<=T2;
			    else   
			        estado<=OFF;
			    end if;   
			when others => estado<=OFF;
end case;
end if;
end process;

process(estado)
begin
case estado is
    when OFF => M<='0';
    when T1 => M<='0';
    when ONN => M<='1';
    when T2 => M<='1';
    when others => M<='0';
end case;
end process;

end behavioral;

