# Ejemplo 4.5. Biestable síncrono por flanco JK con línea de clear, flip-flop JK. 

# TESTED

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
--use IEEE.STD_LOGIC_SIGNED.ALL;
use IEEE.numeric_std.all;

entity base is
	Port (
		G_CLOCK_50 : in std_logic;
		V_SW : in std_logic_vector (9 downto 0);
		V_BT:  in std_logic_vector (3 downto 0);
		G_LED : out std_logic_vector (9 downto 0);
		G_HEX0 : out std_logic_vector (0 to 6);
		G_HEX1 : out std_logic_vector (0 to 6);
		G_HEX2 : out std_logic_vector (0 to 6);
		G_HEX3 : out std_logic_vector (0 to 6);
		G_HEX4 : out std_logic_vector (0 to 6);
		G_HEX5 : out std_logic_vector (0 to 6)
		);
end base;

architecture behavioral of base is
--aqui comienzan las signals
signal J: std_logic;
signal K: std_logic;
signal clk: std_logic; 
signal Q: std_logic :='0';
signal noQ: std_logic :='1';
signal clear: std_logic;
signal entrada: std_logic_vector (1 downto 0);
--aqui acaban

begin
--asignación de signals, entradas y salidas
J<=v_sw(1);
K<=v_sw(0);
clk<=G_CLOCK_50;
g_led(1)<=Q;
g_led(0)<=noQ;
clear<=not(v_bt(0));
--fin de asignación de signals, entradas y salidas

--comienzan los process
entrada<=J&K;
process(clear, clk)
begin
if clear='1' then
    Q<='0';
    noQ<='1';
elsif rising_edge(clk) then
    case entrada is
    when "00" => Q<=Q;
                 noQ<=noQ;
    when "10" => Q<='1';
                 noQ<='0';
    when "01" => Q<='0';
                 noQ<='1';
    when "11" => Q<=noQ;
                 noQ<=Q;
    end case;
end if;
end process;

end Behavioral;
